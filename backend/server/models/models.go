// Package genmodels provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package genmodels

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// AuthenticatedSoundcloudUrl defines model for AuthenticatedSoundcloudUrl.
type AuthenticatedSoundcloudUrl struct {
	// a valid "BearerToken"
	BearerToken string `json:"bearerToken"`

	// the soundcloud url
	Url string `json:"url"`
}

// SoundcloudUrl defines model for SoundcloudUrl.
type SoundcloudUrl struct {
	// the order of the soundcloud display
	UiOrder *int `json:"uiOrder,omitempty"`

	// the soundcloud url
	Url string `json:"url"`
}

// UserCredentials defines model for UserCredentials.
type UserCredentials struct {
	// the user's password
	Password string `json:"password"`

	// the user's username
	Username string `json:"username"`
}

// AddSoundcloudUrlJSONBody defines parameters for AddSoundcloudUrl.
type AddSoundcloudUrlJSONBody = SoundcloudUrl

// DeleteSoundcloudUrlJSONBody defines parameters for DeleteSoundcloudUrl.
type DeleteSoundcloudUrlJSONBody = AuthenticatedSoundcloudUrl

// SiteLoginJSONBody defines parameters for SiteLogin.
type SiteLoginJSONBody = UserCredentials

// UpdateSoundcloudUrlJSONBody defines parameters for UpdateSoundcloudUrl.
type UpdateSoundcloudUrlJSONBody = SoundcloudUrl

// AddSoundcloudUrlJSONRequestBody defines body for AddSoundcloudUrl for application/json ContentType.
type AddSoundcloudUrlJSONRequestBody = AddSoundcloudUrlJSONBody

// DeleteSoundcloudUrlJSONRequestBody defines body for DeleteSoundcloudUrl for application/json ContentType.
type DeleteSoundcloudUrlJSONRequestBody = DeleteSoundcloudUrlJSONBody

// SiteLoginJSONRequestBody defines body for SiteLogin for application/json ContentType.
type SiteLoginJSONRequestBody = SiteLoginJSONBody

// UpdateSoundcloudUrlJSONRequestBody defines body for UpdateSoundcloudUrl for application/json ContentType.
type UpdateSoundcloudUrlJSONRequestBody = UpdateSoundcloudUrlJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Add soundcloud url
	// (PUT /add-soundcloud-url)
	AddSoundcloudUrl(ctx echo.Context) error
	// Delete soundcloud url
	// (DELETE /delete-soundcloud-url)
	DeleteSoundcloudUrl(ctx echo.Context) error
	// Get soundcloud urls
	// (GET /get-soundcloud-urls)
	GetSoundcloudUrls(ctx echo.Context) error
	// Login to andrewwillette.com
	// (POST /login)
	SiteLogin(ctx echo.Context) error
	// Batch update soundcloud urls
	// (PUT /update-soundcloud-url)
	UpdateSoundcloudUrl(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AddSoundcloudUrl converts echo context to params.
func (w *ServerInterfaceWrapper) AddSoundcloudUrl(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddSoundcloudUrl(ctx)
	return err
}

// DeleteSoundcloudUrl converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSoundcloudUrl(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSoundcloudUrl(ctx)
	return err
}

// GetSoundcloudUrls converts echo context to params.
func (w *ServerInterfaceWrapper) GetSoundcloudUrls(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSoundcloudUrls(ctx)
	return err
}

// SiteLogin converts echo context to params.
func (w *ServerInterfaceWrapper) SiteLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SiteLogin(ctx)
	return err
}

// UpdateSoundcloudUrl converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateSoundcloudUrl(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateSoundcloudUrl(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.PUT(baseURL+"/add-soundcloud-url", wrapper.AddSoundcloudUrl)
	router.DELETE(baseURL+"/delete-soundcloud-url", wrapper.DeleteSoundcloudUrl)
	router.GET(baseURL+"/get-soundcloud-urls", wrapper.GetSoundcloudUrls)
	router.POST(baseURL+"/login", wrapper.SiteLogin)
	router.PUT(baseURL+"/update-soundcloud-url", wrapper.UpdateSoundcloudUrl)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWX2/bNhD/KgQ3YC+O7GzBMPhpzjYEATZsiGPsockDI54lphTJ3p1suIG/e0HRsS1L",
	"SVyjLfqmhMe7+/25o59k7qvgHTgmOX6SlJdQqeZzUnMJjk2uGPTU107n1td6hjaeBvQBkA00sQ+gEPDW",
	"vwcX/9RAOZrAxjs5lkoslDVa3MnLXdidlAPJqwByLInRuEKuB7JOydv3uQRB2/oixnSurgcS4UNtELQc",
	"v5MpZr+r++0V//AIOcdqb4Cqzb+oAfsb8vFI+Lk46E4bClatdh0ax1AAfml0fXhmBPgHgo6qKUtdREER",
	"LT3q/i5qAvyJxDaoTx8CdKqCVxNsg97EsQvcFu3iireMm/tYM/eOVc7xEyplrBzLpbEWmCFTTiMsz3+7",
	"+PX3Ip5lua/kQKZ25aQ5Ff9voiOYNoAbIBaT/67FsjR5KQL6hdFAAoF8jTmQmHsU1UoEQPJOWbGEBzIM",
	"WcRp2MYqqYdtS7mvxM1f09uYVw7kApBSsfNslI1iDz6AU8HIsfwlG2UXDRNcNmINldZnO2ecbdwTau6y",
	"P9GahGp8tG+jqL2KIdc6BbUdn9QA4kuvV8/0gmvyqxBsHH3j3fCRvNsth/j1I8JcjuUPw932GG5Wx7Bd",
	"Y71OqlPwjpILfx6Nughuo3/QiqUiQXWeA9G8tnYllNagI1UXo/PutZlTNZcezccYtB5IqqtK4SrB7Rks",
	"VVC03q5J8Y9yqoAq4r6PGYYaLDD0UJ8Ouk382fz/WQD9sgIp8FuI8MryPlaRaQtLV5jExknSJB5OU6cA",
	"PpCmgVBAz1jcAKOBRZTG2oNy1FHnCrjFFMl+mo4WyDBU9Jnjsl1/ClGt0vZrgzqAIZaA0FYGN7B1dsD7",
	"FXAPC8ewbn1hGnTBU9/+2bObYC+6e7DD9tQw/N1k/ToTcPgYHmv7eO9gA+3P0ot2b7CIuTK2Y/d09BIt",
	"z/TvcRgzJt7roFXvLup9BmZNNAnlRGOf+Puk9SaI9Kh2vZ9ufvfPQ5/bE0Un7aFLxXm5SXDKYKzXnwIA",
	"AP//G3e1NEALAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
